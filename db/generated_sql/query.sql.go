// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package generated_sql

import (
	"context"
)

const searchBooksByPattern = `-- name: SearchBooksByPattern :many
SELECT id, title, author, published_at, created_at FROM books WHERE title LIKE ? OR author LIKE ?
`

type SearchBooksByPatternParams struct {
	Title  string
	Author string
}

func (q *Queries) SearchBooksByPattern(ctx context.Context, arg SearchBooksByPatternParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, searchBooksByPattern, arg.Title, arg.Author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.PublishedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchBooksFullText = `-- name: SearchBooksFullText :many
SELECT id, title, author, published_at, created_at 
FROM books 
WHERE MATCH(title, author) AGAINST(? IN BOOLEAN MODE)
`

// This query uses full-text search capabilities to find books by title or author.
func (q *Queries) SearchBooksFullText(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, searchBooksFullText)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.PublishedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
