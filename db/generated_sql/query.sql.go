// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package generated_sql

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createOutboxMessage = `-- name: CreateOutboxMessage :execresult
INSERT INTO outbox (event_type, payload) VALUES (?, ?)
`

type CreateOutboxMessageParams struct {
	EventType string
	Payload   json.RawMessage
}

func (q *Queries) CreateOutboxMessage(ctx context.Context, arg CreateOutboxMessageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOutboxMessage, arg.EventType, arg.Payload)
}

const createPrimeCheck = `-- name: CreatePrimeCheck :execresult
INSERT INTO prime_checks (user_id, number_text) VALUES (?, ?)
`

type CreatePrimeCheckParams struct {
	UserID     int32
	NumberText string
}

func (q *Queries) CreatePrimeCheck(ctx context.Context, arg CreatePrimeCheckParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPrimeCheck, arg.UserID, arg.NumberText)
}

const getPrimeCheck = `-- name: GetPrimeCheck :one
SELECT
    id,
    user_id,
    number_text,
    created_at,
    updated_at
FROM prime_checks
WHERE
    id = ?
`

func (q *Queries) GetPrimeCheck(ctx context.Context, id int32) (PrimeCheck, error) {
	row := q.db.QueryRowContext(ctx, getPrimeCheck, id)
	var i PrimeCheck
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NumberText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUnprocessedOutboxMessages = `-- name: GetUnprocessedOutboxMessages :many
SELECT
    id,
    event_type,
    payload,
    processed,
    created_at,
    updated_at
FROM outbox
WHERE
    processed = FALSE
ORDER BY created_at ASC
`

func (q *Queries) GetUnprocessedOutboxMessages(ctx context.Context) ([]Outbox, error) {
	rows, err := q.db.QueryContext(ctx, getUnprocessedOutboxMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Outbox
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.Payload,
			&i.Processed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPrimeChecks = `-- name: ListPrimeChecks :many
SELECT
    id,
    user_id,
    number_text,
    created_at,
    updated_at
FROM prime_checks
ORDER BY created_at DESC
`

func (q *Queries) ListPrimeChecks(ctx context.Context) ([]PrimeCheck, error) {
	rows, err := q.db.QueryContext(ctx, listPrimeChecks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PrimeCheck
	for rows.Next() {
		var i PrimeCheck
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.NumberText,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markOutboxMessageProcessed = `-- name: MarkOutboxMessageProcessed :exec
UPDATE outbox
SET
    processed = TRUE,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = ?
`

func (q *Queries) MarkOutboxMessageProcessed(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, markOutboxMessageProcessed, id)
	return err
}
