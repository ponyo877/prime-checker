/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Prime Check Service
 * OpenAPI spec version: 0.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Error,
  PrimeCheck,
  PrimeCheckInput,
  PrimeCheckList,
  Setting
} from './primeApi.schemas';





export const primeChecksList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PrimeCheckList>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/prime-check`,options
    );
  }


export const getPrimeChecksListQueryKey = () => {
    return [`http://localhost:8080/prime-check`] as const;
    }

    
export const getPrimeChecksListQueryOptions = <TData = Awaited<ReturnType<typeof primeChecksList>>, TError = AxiosError<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof primeChecksList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPrimeChecksListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof primeChecksList>>> = ({ signal }) => primeChecksList({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof primeChecksList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type PrimeChecksListQueryResult = NonNullable<Awaited<ReturnType<typeof primeChecksList>>>
export type PrimeChecksListQueryError = AxiosError<Error>


export function usePrimeChecksList<TData = Awaited<ReturnType<typeof primeChecksList>>, TError = AxiosError<Error>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof primeChecksList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof primeChecksList>>,
          TError,
          Awaited<ReturnType<typeof primeChecksList>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePrimeChecksList<TData = Awaited<ReturnType<typeof primeChecksList>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof primeChecksList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof primeChecksList>>,
          TError,
          Awaited<ReturnType<typeof primeChecksList>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePrimeChecksList<TData = Awaited<ReturnType<typeof primeChecksList>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof primeChecksList>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function usePrimeChecksList<TData = Awaited<ReturnType<typeof primeChecksList>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof primeChecksList>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getPrimeChecksListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const primeChecksCreate = (
    primeCheckInput: PrimeCheckInput, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PrimeCheck>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/prime-check`,
      primeCheckInput,options
    );
  }



export const getPrimeChecksCreateMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof primeChecksCreate>>, TError,{data: PrimeCheckInput}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof primeChecksCreate>>, TError,{data: PrimeCheckInput}, TContext> => {

const mutationKey = ['primeChecksCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof primeChecksCreate>>, {data: PrimeCheckInput}> = (props) => {
          const {data} = props ?? {};

          return  primeChecksCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PrimeChecksCreateMutationResult = NonNullable<Awaited<ReturnType<typeof primeChecksCreate>>>
    export type PrimeChecksCreateMutationBody = PrimeCheckInput
    export type PrimeChecksCreateMutationError = AxiosError<Error>

    export const usePrimeChecksCreate = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof primeChecksCreate>>, TError,{data: PrimeCheckInput}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof primeChecksCreate>>,
        TError,
        {data: PrimeCheckInput},
        TContext
      > => {

      const mutationOptions = getPrimeChecksCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const primeChecksGet = (
    requestId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PrimeCheck>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/prime-check/${requestId}`,options
    );
  }


export const getPrimeChecksGetQueryKey = (requestId: number,) => {
    return [`http://localhost:8080/prime-check/${requestId}`] as const;
    }

    
export const getPrimeChecksGetQueryOptions = <TData = Awaited<ReturnType<typeof primeChecksGet>>, TError = AxiosError<Error>>(requestId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof primeChecksGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPrimeChecksGetQueryKey(requestId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof primeChecksGet>>> = ({ signal }) => primeChecksGet(requestId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(requestId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof primeChecksGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type PrimeChecksGetQueryResult = NonNullable<Awaited<ReturnType<typeof primeChecksGet>>>
export type PrimeChecksGetQueryError = AxiosError<Error>


export function usePrimeChecksGet<TData = Awaited<ReturnType<typeof primeChecksGet>>, TError = AxiosError<Error>>(
 requestId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof primeChecksGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof primeChecksGet>>,
          TError,
          Awaited<ReturnType<typeof primeChecksGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePrimeChecksGet<TData = Awaited<ReturnType<typeof primeChecksGet>>, TError = AxiosError<Error>>(
 requestId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof primeChecksGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof primeChecksGet>>,
          TError,
          Awaited<ReturnType<typeof primeChecksGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePrimeChecksGet<TData = Awaited<ReturnType<typeof primeChecksGet>>, TError = AxiosError<Error>>(
 requestId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof primeChecksGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function usePrimeChecksGet<TData = Awaited<ReturnType<typeof primeChecksGet>>, TError = AxiosError<Error>>(
 requestId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof primeChecksGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getPrimeChecksGetQueryOptions(requestId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const settingsGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Setting>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/settings`,options
    );
  }


export const getSettingsGetQueryKey = () => {
    return [`http://localhost:8080/settings`] as const;
    }

    
export const getSettingsGetQueryOptions = <TData = Awaited<ReturnType<typeof settingsGet>>, TError = AxiosError<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof settingsGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSettingsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof settingsGet>>> = ({ signal }) => settingsGet({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof settingsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type SettingsGetQueryResult = NonNullable<Awaited<ReturnType<typeof settingsGet>>>
export type SettingsGetQueryError = AxiosError<Error>


export function useSettingsGet<TData = Awaited<ReturnType<typeof settingsGet>>, TError = AxiosError<Error>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof settingsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof settingsGet>>,
          TError,
          Awaited<ReturnType<typeof settingsGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useSettingsGet<TData = Awaited<ReturnType<typeof settingsGet>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof settingsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof settingsGet>>,
          TError,
          Awaited<ReturnType<typeof settingsGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useSettingsGet<TData = Awaited<ReturnType<typeof settingsGet>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof settingsGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useSettingsGet<TData = Awaited<ReturnType<typeof settingsGet>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof settingsGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getSettingsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const settingsCreate = (
    setting: Setting, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Setting>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/settings`,
      setting,options
    );
  }



export const getSettingsCreateMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof settingsCreate>>, TError,{data: Setting}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof settingsCreate>>, TError,{data: Setting}, TContext> => {

const mutationKey = ['settingsCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof settingsCreate>>, {data: Setting}> = (props) => {
          const {data} = props ?? {};

          return  settingsCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SettingsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof settingsCreate>>>
    export type SettingsCreateMutationBody = Setting
    export type SettingsCreateMutationError = AxiosError<Error>

    export const useSettingsCreate = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof settingsCreate>>, TError,{data: Setting}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof settingsCreate>>,
        TError,
        {data: Setting},
        TContext
      > => {

      const mutationOptions = getSettingsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
