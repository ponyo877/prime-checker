// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// PrimeChecksCreate implements PrimeChecks_create operation.
	//
	// POST /prime-check
	PrimeChecksCreate(ctx context.Context, req *PrimeCheckInput) (*PrimeCheck, error)
	// PrimeChecksGet implements PrimeChecks_get operation.
	//
	// GET /prime-check/{request_id}
	PrimeChecksGet(ctx context.Context, params PrimeChecksGetParams) (*PrimeCheck, error)
	// PrimeChecksList implements PrimeChecks_list operation.
	//
	// GET /prime-check
	PrimeChecksList(ctx context.Context) (*PrimeCheckList, error)
	// SettingsCreate implements Settings_create operation.
	//
	// POST /settings
	SettingsCreate(ctx context.Context, req *Setting) (*Setting, error)
	// SettingsGet implements Settings_get operation.
	//
	// GET /settings
	SettingsGet(ctx context.Context) (*Setting, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
