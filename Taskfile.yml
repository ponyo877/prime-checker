version: '3'

interval: 500ms

tasks:
  tsp:
    cmds:
      - tsp compile main.tsp --emit @typespec/openapi3
    dir: ./typespec/
    sources:
      - typespec/**/*.tsp
    generates:
      - typespec/tsp-output/@typespec/openapi3/openapi.yaml

  # frontend:
  #   cmds:
  #     - pnpm run dev
  #   dir: ./web
  #   desc: "Run the Node.js development server"

  # frontend-build:
  #   deps: [npmi, openapi-client]
  #   watch: true
  #   cmds:
  #     - cd ./web && pnpm run build
  #   sources:
  #     - ./web/package.json
  #     - ./web/package-lock.json
  #     - ./web/tsconfig.json
  #     - ./web/src/**/*.svelte
  #   generates:
  #     - ./web/dist/index.html
  #     - ./web/dist/**/*.js
  #   desc: "Build the frontend"

  sqlc:
    cmds:
      - sqlc generate -f ./db/sqlc.yml
    sources:
      - ./db/sqlc.yml
      - ./db/queries/*.sql
      - ./db/init/schema.sql
    generates:
      - ./db/generated/db.go
      - ./db/generated/models.go
      - ./db/generated/public.sql.go
    desc: "Generate SQLC code"

  # dev:
  #   deps: [sqlc, frontend, frontend-build, ogen, openapi-client]
  #   desc: "Run both SQLC generation and Node.js dev server"

  # gen:
  #   deps: [ogen, openapi-client, sqlc]
  #   desc: "Generate OpenAPI server and client code"

  ogen:
    deps: ['tsp']
    cmds:
      - go generate ./cmd/web-server/main.go
    sources:
      - typespec/tsp-output/@typespec/openapi3/openapi.yaml
      - ./cmd/web-server/main.go
    generates:
      - ./openapi/oas_cfg_gen.go
      - ./openapi/oas_client_gen.go
    desc: "Generate OpenAPI server code"

  npmi:
    cmds:
      - pnpm install
    dir: ./web
    sources:
      - ./web/package.json
      - ./web/package-lock.json
    desc: "Install pnpm dependencies"

  openapi-client:
    deps: [npmi, tsp]
    dir: ./web
    cmds:
      - pnpm run generate-client
    sources:
      - typespec/tsp-output/@typespec/openapi3/openapi.yaml
      - orval.config.ts
    generates:
      - ./src/generated-client/primeApi.ts
      - ./src/generated-client/model
    desc: "Generate OpenAPI client code with Orval"

  # docker-build:
  #   cmds:
  #     - docker build -t blog4 .
  #   sources:
  #     - Dockerfile

  # docker-run:
  #   cmds:
  #     - docker run --rm -it --env-file .env -p 8080:8080 blog4

  all:up:
    desc: "Start all services with docker-compose"
    cmds:
      - docker compose up -d
  
  all:down:
    desc: "Stop all services database"
    cmds:
      - docker compose down

  all:reset:
    desc: "Reset all services (destroy and recreate)"
    cmds:
      - docker compose down -v
      - docker compose up -d --build

  all:log:
    desc: "Show logs for all services"
    cmds:
      - docker compose logs -f --tail=100
  
  db:shell:
    desc: "Open MySQL shell"
    cmds:
      - docker compose exec mysql mysql -u${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} --default-character-set=utf8mb4
  
  db:seed:
    desc: "Load seed data into database"
    cmds:
      - docker compose exec -T mysql mysql -u${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} --default-character-set=utf8mb4 < db/init/seed.sql

  msg:up:
    desc: "Start NATS server with docker-compose"
    cmds:
      - docker compose up -d nats
  
  mail:up:
    desc: "Start Mailpit server with docker-compose"
    cmds:
      - docker compose up -d mailpit

  fmt:
    desc: "Format Go code with goimports"
    cmds:
      - go fmt ./...
      - goimports -w -local github.com/ponyo877/prime-checker .
    sources:
      - '**/*.go'

  lint:
    desc: "Run linters"
    cmds:
      - goimports -d -local github.com/ponyo877/prime-checker .
      - go vet ./...

  # biome-format:
  #   desc: "Format frontend code with Biome"
  #   dir: ./web
  #   cmds:
  #     - pnpm run format
  #   sources:
  #     - 'src/**/*.{js,ts,jsx,tsx,svelte,json,jsonc}'
  #     - '*.{js,ts,json,jsonc}'

  # biome-lint:
  #   desc: "Lint frontend code with Biome"
  #   dir: ./web
  #   cmds:
  #     - pnpm run lint

  # biome-check:
  #   desc: "Check frontend code with Biome (format and lint)"
  #   dir: ./web
  #   cmds:
  #     - npx biome check .

  # frontend-fmt:
  #   desc: "Format and lint frontend code"
  #   deps: [biome-format, biome-lint]